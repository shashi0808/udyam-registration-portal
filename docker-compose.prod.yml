version: '3.8'

services:
  # Production PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: udyam-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-udyam_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-udyam_secure_password_2024}
      POSTGRES_DB: ${DB_NAME:-udyam_registration}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - udyam-network-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-udyam_user} -d ${DB_NAME:-udyam_registration}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Production Redis for caching
  redis:
    image: redis:7-alpine
    container_name: udyam-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_password_2024}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - udyam-network-prod
    volumes:
      - redis_data_prod:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Production Backend API
  backend:
    build: 
      context: .
      target: backend-builder
    container_name: udyam-backend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://${DB_USER:-udyam_user}:${DB_PASSWORD:-udyam_secure_password_2024}@postgres:5432/${DB_NAME:-udyam_registration}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password_2024}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-super-secure-jwt-secret-key-2024-production}
      CORS_ORIGIN: ${FRONTEND_URL:-http://localhost:3000}
      API_RATE_LIMIT: ${API_RATE_LIMIT:-100}
      DEMO_MODE: ${DEMO_MODE:-false}
    ports:
      - "${BACKEND_PORT:-5000}:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - udyam-network-prod
    volumes:
      - ./backend/logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Production Frontend Application  
  frontend:
    build:
      context: .
      target: frontend-builder
    container_name: udyam-frontend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:5000/api}
      PORT: 3000
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - udyam-network-prod
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Nginx Reverse Proxy for production
  nginx:
    image: nginx:alpine
    container_name: udyam-nginx-prod
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs_prod:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - udyam-network-prod
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  nginx_logs_prod:
    driver: local

networks:
  udyam-network-prod:
    driver: bridge